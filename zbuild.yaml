---
alias:
  # External tools
  # prettier-ignore
  as       : mips-elf-as      # GNU assembler (GNU Binutils) 2.39
  ar       : mips-elf-ar      # GNU assembler (GNU Binutils) 2.39
  ld       : mips-elf-ld      # GNU assembler (GNU Binutils) 2.39
  objcopy  : mips-elf-objcopy # GNU assembler (GNU Binutils) 2.39
  mkpsxiso : mkpsxiso         # MKPSXISO 2.02
  cargo    : cargo            # cargo 1.72.0-nightly (f7b95e316 2023-05-30)
  sed      : sed              # sed (GNU sed) 4.9
  sha256sum: sha256sum        # sha256sum (GNU coreutils) 9.3
  rm       : rm               # rm        (GNU coreutils) 9.3
  mkdir    : mkdir            # mkdir     (GNU coreutils) 9.3
  cp       : cp               # cp        (GNU coreutils) 9.3
  touch    : touch            # touch     (GNU coreutils) 9.3
  truncate : truncate         # truncate  (GNU coreutils) 9.3
  python3  : python3          # Python 3.11.3
  yq       : yq               # yq 3.2.2
  cargo-psx: cargo-psx        # cargo-psx-0.1.3

  # Other tools
  generate_psx_iso_deps   : tools/generate_psx_iso_deps.py
  generate_compare_deps   : tools/generate_compare_deps.py
  mkpsexe_from_yaml_deps  : tools/mkpsexe_from_yaml_deps.py
  mkraw_exe_from_yaml_deps: tools/mkraw_exe_from_yaml_deps.py
  ld_from_yaml            : tools/ld_from_yaml.py
  ld_from_yaml_deps       : tools/ld_from_yaml_deps.py
  process_path            : tools/process_path.py
  mkpack_deps             : tools/mkpack_deps.py
  mkmap_deps              : tools/mkmap_deps.py
  mkmap_tile_deps         : tools/mkmap_tile_deps.py
  mkrlen_from_yaml        : tools/mkrlen_from_yaml.py
  mkrlen_from_yaml_deps   : tools/mkrlen_from_yaml_deps.py

  # Cargo tools
  mkpsexe    : $(build_rust_tool_dir)/ddw3-mkpsexe
  mklang_file: $(build_rust_tool_dir)/ddw3-mklang-file
  mkpack     : $(build_rust_tool_dir)/ddw3-mkpack
  mktim      : $(build_rust_tool_dir)/ddw3-mktim
  mkmap      : $(build_rust_tool_dir)/ddw3-mkmap
  mkmap_tile : $(build_rust_tool_dir)/ddw3-mkmap-tile
  mkrlen     : $(build_rust_tool_dir)/ddw3-mkrlen

  # Directories
  build_dir  : build
  build_rust_tool_dir   : $(build_dir)/tools
  build_misc_dir        : $(build_dir)/misc
  build_psx_iso_dir     : $(build_dir)/iso
  build_asm_dir         : $(build_dir)/asm
  build_elf_dir         : $(build_dir)/elf
  build_psexe_dir       : $(build_dir)/psexe
  build_rust_dir        : $(build_dir)/rust
  build_raw_exe_dir     : $(build_dir)/raw_exe
  build_lang_file_dir   : $(build_dir)/lang_file
  build_pack_dir        : $(build_dir)/pack
  build_tim_dir         : $(build_dir)/tim
  build_map_dir         : $(build_dir)/map
  build_map_tile_dir    : $(build_dir)/map-tile
  build_rlen_dir        : $(build_dir)/rlen
  build_remake_psexe_dir: $(build_dir)/remake-psexe

  # Licenses
  license_psx_iso : licenses/psx-bin.dat
  license_psexe_eu: licenses/psexe-eu.dat
  license_psexe_na: licenses/psexe-na.dat

  # Misc
  dummy_buffer: $(build_misc_dir)/dummy

  # Compare
  compare_checksums: checksums.sha256
  compare_ok       : $(build_dir)/compare.ok
  compare_deps     : $(build_dir)/compare.d

  # Rust tool
  rust_tool     : $(build_rust_tool_dir)/^(name::non_empty)
  rust_tool_deps: $(build_rust_tool_dir)/^(name).d
  rust_tool_src : tools/^(name)

  # Psx iso
  dw2003_psx_iso       : $(build_psx_iso_dir)/dw2003.bin
  dw2003_remake_psx_iso: $(build_psx_iso_dir)/dw2003-remake.bin
  dw3_psx_iso          : $(build_psx_iso_dir)/dw3.bin
  psx_iso              : $(build_psx_iso_dir)/^(path).bin
  psx_iso_cue          : $(build_psx_iso_dir)/^(path).cue
  psx_iso_lba          : $(build_psx_iso_dir)/^(path).lba
  psx_iso_deps         : $(build_psx_iso_dir)/^(path).d
  psx_iso_xml          : ^(path).xml

  # Assembly
  asm_obj     : $(build_asm_dir)/^(path).o
  asm_obj_deps: $(build_asm_dir)/^(path).d
  asm_src     : asm/^(path).s

  # Elf
  elf              : $(build_elf_dir)/^(path).elf
  elf_deps         : $(build_elf_dir)/^(path).d
  elf_linker_script: $(build_elf_dir)/^(path).ld
  elf_yaml         : elf/^(path).yaml

  # Psexe
  psexe     : $(build_psexe_dir)/^(path).psexe
  psexe_deps: $(build_psexe_dir)/^(path).d
  psexe_yaml: psexe/^(path).yaml

  # Psexe remake
  remake_psexe     : $(build_remake_psexe_dir)/^(name).exe
  remake_psexe_deps: $(build_remake_psexe_dir)/^(name).d

  # Raw exe
  raw_exe     : $(build_raw_exe_dir)/^(path).bin
  raw_exe_deps: $(build_raw_exe_dir)/^(path).d
  raw_exe_yaml: raw_exe/^(path).yaml

  # Lang
  lang_file     : $(build_lang_file_dir)/^(path).bin
  lang_file_yaml: lang_file/^(path).yaml

  # Pack
  pack     : $(build_pack_dir)/^(path).bin
  pack_deps: $(build_pack_dir)/^(path).d
  pack_yaml: pack/^(path).yaml

  # Tim
  tim     : $(build_tim_dir)/^(path).tim
  tim_img : tim/^(path).png
  tim_clut: tim/^(path).clut.png
  tim_yaml: tim/^(path).yaml

  # Map
  map     : $(build_map_dir)/^(path).bin
  map_deps: $(build_map_dir)/^(path).d
  map_yaml: map/^(path).yaml

  # Map tile
  map_tile     : $(build_map_tile_dir)/^(path).bin
  map_tile_deps: $(build_map_tile_dir)/^(path).d
  map_tile_yaml: map-tile/^(path).yaml

  # Rlen
  rlen     : $(build_rlen_dir)/^(path).bin
  rlen_deps: $(build_rlen_dir)/^(path).d
  rlen_yaml: rlen/^(path).yaml

  # Rust library
  rust_lib     : $(build_rust_dir)/^(name).a
  rust_lib_obj : $(build_rust_dir)/^(name).o
  rust_lib_deps: $(build_rust_dir)/^(name).d

# By default built the final `iso`s
default:
  - $(dw3_psx_iso)
  - $(dw2003_psx_iso)
  - $(dw2003_remake_psx_iso)

rules:
  # Compare
  compare:
    out: [$(compare_ok)]
    deps: [$(compare_checksums), deps_file: $(compare_deps)]
    exec:
      - [$(sha256sum), --check, --quiet, $(compare_checksums)]
      - [$(touch), $(compare_ok)]

  # Compare dependencies
  compare-deps:
    out: [$(compare_deps)]
    deps:
      - $(compare_checksums)
      - $(generate_compare_deps)
      - static: $(compare_deps::dir_name)/
    exec:
      - - $(python3)
        - $(generate_compare_deps)
        - --checksums
        - $(compare_checksums)
        - --compare-output
        - $(compare_ok)
        - --deps-file
        - $(compare_deps)

  # Clean
  clean:
    exec:
      - [$(rm), -rf, $(build_dir)/]
      - [$(rm), -rf, tools/target/]
      - [$(rm), -rf, rust/target/]

  # Directories
  mkdir:
    alias:
      dir: $(build_dir)^(path)/
    out: [$(dir)]
    exec:
      - [$(mkdir), -p, $(dir)]

  # Psx iso
  mkpsxiso:
    out: [$(psx_iso), $(psx_iso_cue), $(psx_iso_lba)]
    deps:
      - $(psx_iso_xml)
      - $(license_psx_iso)
      - deps_file: $(psx_iso_deps)
      - static: $(psx_iso::dir_name)/
    exec:
      - - $(mkpsxiso)
        - $(psx_iso_xml)
        - -nolimit
        - -noxa
        - -y
        - --quiet
        - --output
        - $(psx_iso)
        - --cuefile
        - $(psx_iso_cue)
        - -lba
        - $(psx_iso_lba)

  # Pxs iso dependencies
  mkpsxiso-deps:
    out: [$(psx_iso_deps)]
    deps: [$(psx_iso_xml), static: $(psx_iso_deps::dir_name)/]
    exec:
      - - $(python3)
        - $(generate_psx_iso_deps)
        - --iso
        - $(psx_iso)
        - --xml
        - $(psx_iso_xml)
        - --deps-file
        - $(psx_iso_deps)

  # Cargo tools
  cargo-tool:
    out: [$(rust_tool), deps_file: $(rust_tool_deps)]
    deps: [static: $(rust_tool::dir_name)/]
    exec:
      - cwd: tools/
        args:
          - $(cargo)
          - build
          - --release
          - --package=^(name)
          - -Z=unstable-options
          - --out-dir=../$(build_rust_tool_dir)
      - [$(cp), tools/target/release/^(name).d, $(rust_tool_deps)]
      - - $(sed)
        - -i
        - -e
        - 's,tools/target/release/,$(build_rust_tool_dir)/,g'
        - $(rust_tool_deps)

  # Buffer
  dummy_buffer:
    out: [$(dummy_buffer)]
    deps: [static: $(dummy_buffer::dir_name)/]
    exec:
      - [$(touch), $(dummy_buffer)]
      - [$(truncate), --size=35283682, $(dummy_buffer)]

  # Psexe
  psexe:
    out: [$(psexe)]
    deps:
      - $(psexe_yaml)
      - $(mkpsexe)
      - deps_file: $(psexe_deps)
      - static: $(psexe::dir_name)/
    exec:
      - - $(mkpsexe)
        - - $(python3)
          - $(process_path)
          - --input-dir=$(psexe_yaml::dir_name)/
          - [$(yq), -rj, .elf, $(psexe_yaml)]
        - '--output=$(psexe)'
        - '--license'
        - - $(python3)
          - $(process_path)
          - --input-dir=$(psexe_yaml::dir_name)/
          - [$(yq), -rj, .license, $(psexe_yaml)]
        - strip_on_fail:
            - printf
            - '--resize-text=%s'
            - [yq, -rje, .resize_text, $(psexe_yaml)]

  # Psexe dependencies
  psexe_deps:
    out: [$(psexe_deps)]
    deps:
      - $(psexe_yaml)
      - $(mkpsexe_from_yaml_deps)
      - static: $(psexe_deps::dir_name)/
    exec:
      - - $(python3)
        - $(mkpsexe_from_yaml_deps)
        - $(psexe_yaml)
        - -o
        - $(psexe)
        - --deps
        - $(psexe_deps)

  # Raw exe
  raw_exe:
    out: [$(raw_exe)]
    deps:
      - $(raw_exe_yaml)
      - deps_file: $(raw_exe_deps)
      - static: $(raw_exe::dir_name)/
    exec:
      - - $(objcopy)
        - - $(python3)
          - $(process_path)
          - --input-dir=$(raw_exe_yaml::dir_name)/
          - [$(yq), -rj, .elf, $(raw_exe_yaml)]
        - '--dump-section=.text=$(raw_exe)'

  # Raw exe dependencies
  raw_exe_deps:
    out: [$(raw_exe_deps)]
    deps:
      - $(raw_exe_yaml)
      - $(mkraw_exe_from_yaml_deps)
      - static: $(raw_exe_deps::dir_name)/
    exec:
      - - $(python3)
        - $(mkraw_exe_from_yaml_deps)
        - $(raw_exe_yaml)
        - -o
        - $(raw_exe)
        - --deps
        - $(raw_exe_deps)

  # Lang file
  lang_file:
    out: [$(lang_file)]
    deps:
      - $(lang_file_yaml)
      - $(mklang_file)
      - static: $(lang_file::dir_name)/
    exec:
      - - $(mklang_file)
        - $(lang_file_yaml)
        - --output=$(lang_file)

  # Tim
  tim:
    out: [$(tim)]
    deps:
      - $(tim_yaml)
      - $(mktim)
      - opt: $(tim_clut)
      - static: $(tim::dir_name)/
    exec:
      - - $(mktim)
        - $(tim_yaml)
        - --output=$(tim)

  # Pack
  pack:
    out: [$(pack)]
    deps:
      - $(pack_yaml)
      - $(mkpack)
      - deps_file: $(pack_deps)
      - static: $(pack::dir_name)/
    exec:
      - - $(mkpack)
        - $(pack_yaml)
        - --output=$(pack)

  # Pack dependencies
  pack_deps:
    out: [$(pack_deps)]
    deps:
      - $(pack_yaml)
      - $(mkpack_deps)
      - static: $(pack_deps::dir_name)/
    exec:
      - - $(python3)
        - $(mkpack_deps)
        - $(pack_yaml)
        - -o
        - $(pack)
        - --deps
        - $(pack_deps)

  # Map
  map:
    out: [$(map)]
    deps:
      - $(map_yaml)
      - $(mkmap)
      - deps_file: $(map_deps)
      - static: $(map::dir_name)/
    exec:
      - - $(mkmap)
        - $(map_yaml)
        - --output=$(map)

  # Map dependencies
  map_deps:
    out: [$(map_deps)]
    deps:
      - $(map_yaml)
      - $(mkmap_deps)
      - static: $(map_deps::dir_name)/
    exec:
      - - $(python3)
        - $(mkmap_deps)
        - $(map_yaml)
        - -o
        - $(map)
        - --deps
        - $(map_deps)

  # Map tile
  map_tile:
    out: [$(map_tile)]
    deps:
      - $(map_tile_yaml)
      - $(mkmap_tile)
      - deps_file: $(map_tile_deps)
      - static: $(map_tile::dir_name)/
    exec:
      - - $(mkmap_tile)
        - $(map_tile_yaml)
        - --output=$(map_tile)

  # Map tile dependencies
  map_tile_deps:
    out: [$(map_tile_deps)]
    deps:
      - $(map_tile_yaml)
      - $(mkmap_tile_deps)
      - static: $(map_tile_deps::dir_name)/
    exec:
      - - $(python3)
        - $(mkmap_tile_deps)
        - $(map_tile_yaml)
        - -o
        - $(map_tile)
        - --deps
        - $(map_tile_deps)

  # Rlen
  rlen:
    out: [$(rlen)]
    deps:
      - $(rlen_yaml)
      - $(mkrlen_from_yaml)
      - $(mkrlen)
      - deps_file: $(rlen_deps)
      - static: $(rlen::dir_name)/
    exec:
      - - $(python3)
        - $(mkrlen_from_yaml)
        - $(rlen_yaml)
        - -o
        - $(rlen)
        - --rlen-bin=$(mkrlen)

  # Rlen dependencies
  rlen_deps:
    out: [$(rlen_deps)]
    deps:
      - $(rlen_yaml)
      - $(mkrlen_from_yaml_deps)
      - static: $(rlen_deps::dir_name)/
    exec:
      - - $(python3)
        - $(mkrlen_from_yaml_deps)
        - $(rlen_yaml)
        - -o
        - $(rlen)
        - --deps
        - $(rlen_deps)

  # Elf
  elf:
    out: [$(elf)]
    deps:
      - $(elf_yaml)
      - $(ld_from_yaml)
      - deps_file: $(elf_deps)
      - static: $(elf::dir_name)/
    exec:
      - - $(python3)
        - $(ld_from_yaml)
        - $(elf_yaml)
        - -o
        - $(elf)
        - --linker-script-output
        - $(elf_linker_script)
        - --ld-bin
        - $(ld)

  # Elf dependencies
  elf_deps:
    out: [$(elf_deps)]
    deps:
      - $(elf_yaml)
      - $(ld_from_yaml_deps)
      - static: $(elf_deps::dir_name)/
    exec:
      - - $(python3)
        - $(ld_from_yaml_deps)
        - $(elf_yaml)
        - -o
        - $(elf)
        - --deps
        - $(elf_deps)

  # Assembly
  asm:
    out: [$(asm_obj), deps_file: $(asm_obj_deps)]
    deps: [$(asm_src), static: $(asm_obj::dir_name)/]
    exec:
      - - $(as)
        - -MD
        - $(asm_obj_deps)
        - $(asm_src)
        - -o
        - $(asm_obj)
        - -EL
        - -mabi=32
        - -mips1
        - -march=r3000
        - -msoft-float
        - -g
        - -Iasm/
        - -I./
        - -I$(asm_src::dir_name)
        - --strip-local-absolute
      # Zbuild doesn't support `\\\n` yet
      - - $(sed)
        - -z
        - -i
        - -e
        - 's/\\\n/ /g'
        - $(asm_obj_deps)

  # Rust library
  rust_lib:
    alias:
      build_target_dir: target/mipsel-sony-psx/release
    out:
      - $(rust_lib)
      - $(rust_lib_obj)
      - deps_file: $(rust_lib_deps)
    deps:
      - static: $(rust_lib::dir_name)/
    exec:
      # Build the crate and copy the finished library
      - cwd: rust/
        args:
          - $(cargo)
          - build
          - --release
          - --package=^(name)
          - -Z=unstable-options
      - [$(cp), rust/$(build_target_dir)/lib^(name).a, $(rust_lib)]

      # Extract the `.a` and turn it into a `.o`
      # Note: Sometimes the linker doesn't like object files being
      #       within an archive and will ignore them unless they're
      #       extracted.
      # TODO: Fix the linker and remove this. Currently this only extracts
      #       the crate itself and not any of it's dependencies. This is
      #       *currently* all we need, but in the future we might need to
      #       use the dependencies.
      - [$(mkdir), -p, $(rust_lib).extracted]
      - [$(ar), x, $(rust_lib), --output, $(rust_lib).extracted]
      - [
          find,
          $(rust_lib).extracted,
          -type,
          f,
          -name,
          '*^(name)*',
          -exec,
          mv,
          '{}',
          $(rust_lib_obj),
          ';',
        ]

      # Then copy the dependency file and adjust the references
      - [$(cp), rust/$(build_target_dir)/lib^(name).d, $(rust_lib_deps)]
      - - sed
        - -i
        - -e
        - 's,rust/$(build_target_dir)/lib^(name).a,$(build_rust_dir)/^(name).a,g'
        - $(rust_lib_deps)

  # psexe (remake)
  remake_psexe:
    alias:
      build_target_dir: target/mipsel-sony-psx/release
    out:
      - $(remake_psexe)
      - deps_file: $(remake_psexe_deps)
    deps:
      - static: $(remake_psexe::dir_name)/
    exec:
      # Build the crate
      - cwd: remake-rust/
        args:
          - $(cargo-psx)
          - build
      - [$(cp), remake-rust/$(build_target_dir)/^(name).exe, $(remake_psexe)]

      # Then copy the dependency file and adjust the references
      - [$(cp), remake-rust/$(build_target_dir)/^(name).d, $(remake_psexe_deps)]
      - - sed
        - -i
        - -e
        - 's,remake-rust/$(build_target_dir)/^(name).exe,$(build_remake_psexe_dir)/^(name).exe,g'
        - $(remake_psexe_deps)
